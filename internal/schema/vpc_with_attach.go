// schema/vpc.go
package schema

import (
	"github.com/hopkali04/health-sys/internal/models"
	"time"

	"github.com/google/uuid"
)

// VPCRequest remains mostly the same for the vpcData part
type VPCRequest_new struct {
	VpcNumber         string    `json:"vpcNumber"`
	ReportedBy        string    `json:"reportedBy"`
	ReportedDate      time.Time `json:"reportedDate"`
	Department        string    `json:"department"`
	Description       string    `json:"description"`
	VpcType           string    `json:"vpcType"`
	ActionTaken       string    `json:"actionTaken"`
	IncidentRelatesTo string    `json:"incidentRelatesTo"`
}

// ToModel converts VPCRequest to models.VPC, now including createdBy
func (req *VPCRequest_new) ToModel(creatorEmployeeID uuid.UUID) models.VPC {
	return models.VPC{
		// ID will be auto-generated by GORM
		VpcNumber:         req.VpcNumber,
		ReportedBy:        req.ReportedBy,
		ReportedDate:      req.ReportedDate,
		Department:        req.Department,
		Description:       req.Description,
		VpcType:           req.VpcType,
		ActionTaken:       req.ActionTaken,
		IncidentRelatesTo: req.IncidentRelatesTo,
		CreatedBy:         creatorEmployeeID, // Set the Employee ID of the creator
	}
}

// UserBasicInfo for embedding creator details in responses
type UserBasicInfo struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"firstName,omitempty"`
	LastName  string    `json:"lastName,omitempty"`
}

// VPCResponse to include attachments and creator info
type VPCResponse_new struct {
	ID                uuid.UUID               `json:"id"`
	VpcNumber         string                  `json:"vpcNumber"`
	ReportedBy        string                  `json:"reportedBy"`
	ReportedDate      time.Time               `json:"reportedDate"`
	Department        string                  `json:"department"`
	Description       string                  `json:"description"`
	VpcType           string                  `json:"vpcType"`
	ActionTaken       string                  `json:"actionTaken"`
	IncidentRelatesTo string                  `json:"incidentRelatesTo"`
	CreatedAt         time.Time               `json:"createdAt"`
	UpdatedAt         time.Time               `json:"updatedAt"`
	CreatedBy         UserBasicInfo           `json:"createdBy"`
	Attachments       []VPCAttachmentResponse `json:"attachments,omitempty"`
}

// FromModel converts models.VPC to VPCResponse
// Assumes vpc.Creator and vpc.Attachments (with vpc.Attachments[i].Uploader) are preloaded by the service.
func FromModel_new(vpc models.VPC) VPCResponse_new {
	attachmentResponses := ToVPCAttachmentResponses(vpc.Attachments) // Use the helper

	creatorInfo := UserBasicInfo{}
	if vpc.Creator.ID != uuid.Nil { // Check if Creator (Employee model) is loaded
		creatorInfo.ID = vpc.Creator.ID
		creatorInfo.FirstName = vpc.Creator.FirstName
		creatorInfo.LastName = vpc.Creator.LastName
	} else if vpc.CreatedBy != uuid.Nil {
		// Fallback if only CreatedBy ID is available (Creator model not preloaded)
		creatorInfo.ID = vpc.CreatedBy
	}

	return VPCResponse_new{
		VpcNumber:         vpc.VpcNumber,
		ReportedBy:        vpc.ReportedBy,
		ReportedDate:      vpc.ReportedDate,
		Department:        vpc.Department,
		Description:       vpc.Description,
		VpcType:           vpc.VpcType,
		ActionTaken:       vpc.ActionTaken,
		IncidentRelatesTo: vpc.IncidentRelatesTo,
		CreatedAt:         vpc.CreatedAt,
		UpdatedAt:         vpc.UpdatedAt,
		CreatedBy:         creatorInfo,
		Attachments:       attachmentResponses,
	}
}

func FromModel_newList(vpcs []models.VPC) []VPCResponse_new {
	responses := make([]VPCResponse_new, len(vpcs))

	for i, vpc := range vpcs {
		responses[i] = FromModel_new(vpc)
	}

	return responses
}